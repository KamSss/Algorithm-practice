/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
//#include <math.h>

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* l3 = NULL;
	struct ListNode* c1 = l1;
	struct ListNode* c2 = l2;
	if (c1 == NULL) {
		return l2;
	}
	if (c2 == NULL) {
		return l1;
	}
	else{
		int a = 0;
		int b = 0;
		int sum = 0;
		int i = 0;
		//拿到i1的位数
		while (c1 != NULL){
			i++;
			c1 = c1->next;
		}
		//把第一个链表的值a求出来
		while (c1 != NULL){
			a += c1->val * pow(10, i - 1);
			c1 = c1->next;
			i--;
			if (i == 0)
				break;
		}
		i = 0;
		//拿到i2位数
		while (c2 != NULL){
			i++;
			c2 = c2->next;
		}
		//求第二个表b的值
		while (c2 != NULL){
			b += c2->val * pow(10, i - 1);
			c2 = c2->next;
			i--;
			if (i == 0)
				break;
		}
		//拿到两数之和sum
		sum = a + b;
		while (sum){
			//拿a存sum的余数放入表3
			a = sum % 10;
			sum = sum / 10;
			l3->val = a;
			l3 = l3->next;
		}
		if (l3 != NULL){
			l3->next = NULL;
		}
		return l3;
	}
}