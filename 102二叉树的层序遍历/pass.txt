/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int getHeight(TreeNode* root){
        if(root == nullptr)
            return 0;
        int left = getHeight(root->left);
        int right = getHeight(root->right);
        
        return left > right ? left + 1 : right + 1;
    }
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> treeVec;
        //二维数组的行数和树的高度一致
		treeVec.resize(getHeight(root));
        //存放节点
        queue<TreeNode*> node;
        //存放节点对应的层号
        queue<int> index;
        //入队根节点
        if(root){
            node.push(root);
            index.push(0);
        }
        while(!node.empty()){
            //对头节点出队
            TreeNode* cur = node.front();
            node.pop();
            int curIndex = index.front();
            index.pop();
            //按层号存放当前节点
            treeVec[curIndex].push_back(cur->val);
            //带出下一层的子节点
            if(cur->left){
                node.push(cur->left);
                index.push(curIndex + 1);
            }
            if(cur->right){
                node.push(cur->right);
                index.push(curIndex + 1);
            }
        }
        
        return treeVec;
    }
};