//拿一个互斥变量 t，当作慢指针是否走的条件，这样既保证了每次快指针走两步慢指针走一步，可以不用考虑快指针是否会走错。
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* fast = head;
        ListNode* slow = head;
        int t = 1;
        while(fast->next != NULL){
            fast = fast->next;
            t = t ^ 1;
            if(t == 0){
                slow = slow->next;
            }            
        }
        return slow;
    }
};